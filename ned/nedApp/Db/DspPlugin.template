record(mbbi, "$(P)$(R)Status")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Status")
    field(ZRVL, "0")
    field(ZRST, "OK")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Command")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Command")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(FVVL, "5")
    field(ZRST, "No command")
    field(ONST, "Initialize")
    field(TWST, "Write config")
    field(THST, "Read config")
    field(FRST, "Reset config")
    field(FVST, "Read status")
}
record(stringin, "$(P)$(R)HwDate")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))HwDate")
    field(VAL,  "Unknown")
    field(SCAN, "I/O Intr")
}
record(longin, "$(P)$(R)HwRev")
{
    field(DTYP,  "asynInt32")
    field(INP,   "@asyn($(PORT),$(ADDR),$(TIMEOUT))HwRev")
    field(VAL,   "0")
    field(SCAN, "I/O Intr")
}
record(longin, "$(P)$(R)HwVer")
{
    field(DTYP,  "asynInt32")
    field(INP,   "@asyn($(PORT),$(ADDR),$(TIMEOUT))HwVer")
    field(VAL,   "0")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)FirmwareDate")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FwDate")
    field(VAL,  "Unknown")
    field(SCAN, "I/O Intr")
}
record(longin, "$(P)$(R)FirmwareRev")
{
    field(DTYP,  "asynInt32")
    field(INP,   "@asyn($(PORT),$(ADDR),$(TIMEOUT))FwRev")
    field(VAL,   "0")
    field(SCAN, "I/O Intr")
}
record(longin, "$(P)$(R)FirmwareVer")
{
    field(DTYP,  "asynInt32")
    field(INP,   "@asyn($(PORT),$(ADDR),$(TIMEOUT))FwVer")
    field(VAL,   "0")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)PixIdOffset")
{
    field(DESC, "Pixel id offset by the Event ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PixIdOffset")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop0Delay")
{
    field(DESC, "Chopper 0 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop0Delay")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop1Delay")
{
    field(DESC, "Chopper 1 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop1Delay")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop2Delay")
{
    field(DESC, "Chopper 2 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop2Delay")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop3Delay")
{
    field(DESC, "Chopper 3 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop3Delay")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop4Delay")
{
    field(DESC, "Chopper 4 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop4Delay")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop5Delay")
{
    field(DESC, "Chopper 5 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop5Delay")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop6Delay")
{
    field(DESC, "Chopper 6 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop6Delay")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Chop7Delay")
{
    field(DESC, "Chopper 7 number of 9.4ns cyc")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop7Delay")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Chop0Freq")
{
    field(DESC, "Chopper 0 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop0Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(mbbo, "$(P)$(R)Chop1Freq")
{
    field(DESC, "Chopper 1 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop1Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(mbbo, "$(P)$(R)Chop2Freq")
{
    field(DESC, "Chopper 2 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop2Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(mbbo, "$(P)$(R)Chop3Freq")
{
    field(DESC, "Chopper 3 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop3Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(mbbo, "$(P)$(R)Chop4Freq")
{
    field(DESC, "Chopper 4 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop4Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(mbbo, "$(P)$(R)Chop5Freq")
{
    field(DESC, "Chopper 5 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop5Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(mbbo, "$(P)$(R)Chop6Freq")
{
    field(DESC, "Chopper 6 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop6Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(mbbo, "$(P)$(R)Chop7Freq")
{
    field(DESC, "Chopper 7 frequency selector")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Chop7Freq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(longout, "$(P)$(R)ChopDutyCycl")
{
    field(DESC, "Number of 100ns cycles to hol")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopDutyCycl")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr22")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr22")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr23")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr23")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr24")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr24")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr25")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr25")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr26")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr26")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr27")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr27")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr28")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr28")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr29")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr29")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr30")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr30")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr31")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr31")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopRtdlFr32")
{
    field(DESC, "RTDL Frame to load into RTDL ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlFr32")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)ChopTrefTrig")
{
    field(DESC, "Chopper TREF trigger select")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopTrefTrig")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZRVL, "0")
    field(ZRST, "Extract")
    field(ZRVL, "1")
    field(ZRST, "Cycle Start")
    field(ZRVL, "2")
    field(ZRST, "Beam On")
    field(ZRVL, " 3")
    field(ZRST, "Event equals TRE")
}
record(mbbo, "$(P)$(R)ChopTrefFreq")
{
    field(DESC, "TREF frequency select")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopTrefFreq")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "60Hz")
    field(ZRVL, "1")
    field(ZRST, "30Hz")
    field(ZRVL, "2")
    field(ZRST, "20Hz")
    field(ZRVL, "3")
    field(ZRST, "15Hz")
    field(ZRVL, "4")
    field(ZRST, "12.5Hz")
    field(ZRVL, "5")
    field(ZRST, "10Hz")
    field(ZRVL, "6")
    field(ZRST, "7.5Hz")
    field(ZRVL, "7")
    field(ZRST, "6Hz")
    field(ZRVL, "8")
    field(ZRST, "5Hz")
    field(ZRVL, "9")
    field(ZRST, "4Hz")
    field(ZRVL, "10")
    field(ZRST, "3Hz")
    field(ZRVL, "11")
    field(ZRST, "2.4Hz")
    field(ZRVL, "12")
    field(ZRST, "2Hz")
    field(ZRVL, "13")
    field(ZRST, "1.5Hz")
    field(ZRVL, "14")
    field(ZRST, "1.25Hz")
    field(ZRVL, "15")
    field(ZRST, "1Hz")
}
record(longout, "$(P)$(R)ChopRtdlOff")
{
    field(DESC, "Chopper RTDL frame offset")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopRtdlOff")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)ChopTrefEvNo")
{
    field(DESC, "Chopper TREF event number to ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopTrefEvNo")
    field(SCAN, "I/O Intr")
    field(VAL,  "39")
}
record(longout, "$(P)$(R)ChopHystMinL")
{
    field(DESC, "Chopper HYST minimum low")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopHystMinL")
    field(SCAN, "I/O Intr")
    field(VAL,  "4")
}
record(longout, "$(P)$(R)ChopHystMinH")
{
    field(DESC, "Chopper HYST minimum high")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopHystMinH")
    field(SCAN, "I/O Intr")
    field(VAL,  "4")
}
record(mbbo, "$(P)$(R)ChopFreqCnt")
{
    field(DESC, "Chopper frequency count contr")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopFreqCnt")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZRVL, "0")
    field(ZRST, "enable strobe at")
    field(ZRVL, " 1")
    field(ZRST, "at cycle X-1")
    field(ZRVL, " 2")
    field(ZRST, "at cycle X-2")
}
record(bo, "$(P)$(R)ChopFreqCyc")
{
    field(DESC, "Chopper frequency cycle selec")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopFreqCyc")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "Present cycle number")
    field(ONAM, "Next cycle number")
}
record(bo, "$(P)$(R)ChopSweepEn")
{
    field(DESC, "Chopper sweep enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ChopSweepEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "TOF fixed offset & S")
    field(ONAM, "TOF fractional offse")
}
record(longout, "$(P)$(R)STsyncDelMax")
{
    field(DESC, "Maximum Delay for Synthesized")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))STsyncDelMax")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)STsyncDelAdj")
{
    field(DESC, "Delay Adjustment for Synthesi")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))STsyncDelAdj")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)STsyncFraAdj")
{
    field(DESC, "Fractional Delay Adjustment f")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))STsyncFraAdj")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)TimestHiFake")
{
    field(DESC, "High DWord of RTDL time stamp")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TimestHiFake")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)EdgeDetMod0")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod0")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod1")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod1")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod2")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod2")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod3")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod3")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod4")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod4")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod5")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod5")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod6")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod6")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod7")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod7")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod8")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod8")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod9")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod9")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod10")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod10")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod11")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod11")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod12")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod12")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod13")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod13")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod14")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod14")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod15")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod15")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod16")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod16")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod17")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod17")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod18")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod18")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod19")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod19")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod20")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod20")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod21")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod21")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod22")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod22")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod23")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod23")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod24")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod24")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod25")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod25")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod26")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod26")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod27")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod27")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod28")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod28")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod29")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod29")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod30")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod30")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(mbbo, "$(P)$(R)EdgeDetMod31")
{
    field(DESC, "Edge Detection mode for chane")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDetMod31")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "disable channel")
    field(ZRVL, "1")
    field(ZRST, "detect rising ed")
    field(ZRVL, "2")
    field(ZRST, "detect falling e")
    field(ZRVL, "3")
    field(ZRST, "detect both edge")
}
record(longout, "$(P)$(R)EdgePixId0")
{
    field(DESC, "Edge Pixel id 0 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId0")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId1")
{
    field(DESC, "Edge Pixel id 1 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId1")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId2")
{
    field(DESC, "Edge Pixel id 2 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId2")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId3")
{
    field(DESC, "Edge Pixel id 3 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId3")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId4")
{
    field(DESC, "Edge Pixel id 4 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId4")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId5")
{
    field(DESC, "Edge Pixel id 5 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId5")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId6")
{
    field(DESC, "Edge Pixel id 6 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId6")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId7")
{
    field(DESC, "Edge Pixel id 7 assigned by m")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId7")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId14")
{
    field(DESC, "Edge Pixel id 14 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId14")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId15")
{
    field(DESC, "Edge Pixel id 15 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId15")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId16")
{
    field(DESC, "Edge Pixel id 16 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId16")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId17")
{
    field(DESC, "Edge Pixel id 17 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId17")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId18")
{
    field(DESC, "Edge Pixel id 18 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId18")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId19")
{
    field(DESC, "Edge Pixel id 19 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId19")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId20")
{
    field(DESC, "Edge Pixel id 20 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId20")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId21")
{
    field(DESC, "Edge Pixel id 21 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId21")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId22")
{
    field(DESC, "Edge Pixel id 22 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId22")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId23")
{
    field(DESC, "Edge Pixel id 23 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId23")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId30")
{
    field(DESC, "Edge Pixel id 30 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId30")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgePixId31")
{
    field(DESC, "Edge Pixel id 31 assigned by ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgePixId31")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeCycAdj0")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj0")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj1")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj1")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj2")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj2")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj3")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj3")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj4")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj4")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj5")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj5")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj6")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj6")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj7")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj7")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj8")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj8")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj9")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj9")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj10")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj10")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj11")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj11")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj12")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj12")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj13")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj13")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj14")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj14")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj15")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj15")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj16")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj16")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj17")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj17")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj18")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj18")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj19")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj19")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj20")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj20")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj21")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj21")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj22")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj22")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj23")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj23")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj24")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj24")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj25")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj25")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj26")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj26")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj27")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj27")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj28")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj28")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj29")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj29")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj30")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj30")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeCycAdj31")
{
    field(DESC, "Edge Cycle number adjustment ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeCycAdj31")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)EdgeDelay0")
{
    field(DESC, "Edge delay 0")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay0")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay1")
{
    field(DESC, "Edge delay 1")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay1")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay8")
{
    field(DESC, "Edge delay 8")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay8")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay9")
{
    field(DESC, "Edge delay 9")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay9")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay10")
{
    field(DESC, "Edge delay 10")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay10")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay11")
{
    field(DESC, "Edge delay 11")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay11")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay12")
{
    field(DESC, "Edge delay 12")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay12")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay13")
{
    field(DESC, "Edge delay 13")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay13")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay14")
{
    field(DESC, "Edge delay 14")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay14")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay15")
{
    field(DESC, "Edge delay 15")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay15")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay16")
{
    field(DESC, "Edge delay 16")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay16")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay17")
{
    field(DESC, "Edge delay 17")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay17")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay24")
{
    field(DESC, "Edge delay 24")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay24")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay25")
{
    field(DESC, "Edge delay 25")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay25")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay26")
{
    field(DESC, "Edge delay 26")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay26")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay27")
{
    field(DESC, "Edge delay 27")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay27")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay28")
{
    field(DESC, "Edge delay 28")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay28")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay29")
{
    field(DESC, "Edge delay 29")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay29")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay30")
{
    field(DESC, "Edge delay 30")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay30")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)EdgeDelay31")
{
    field(DESC, "Edge delay 31")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EdgeDelay31")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)LvdsRxTxen0")
{
    field(DESC, "LVDS receiver transmit enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxTxen0")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "sourced by flow cont")
    field(ONAM, "active")
}
record(bo, "$(P)$(R)LvdsRxTxen1")
{
    field(DESC, "LVDS receiver transmit enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxTxen1")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "sourced by flow cont")
    field(ONAM, "active")
}
record(bo, "$(P)$(R)LvdsRxTxen2")
{
    field(DESC, "LVDS receiver transmit enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxTxen2")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "sourced by flow cont")
    field(ONAM, "active")
}
record(bo, "$(P)$(R)LvdsRxTxen3")
{
    field(DESC, "LVDS receiver transmit enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxTxen3")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "sourced by flow cont")
    field(ONAM, "active")
}
record(bo, "$(P)$(R)LvdsRxTxen4")
{
    field(DESC, "LVDS receiver transmit enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxTxen4")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "sourced by flow cont")
    field(ONAM, "active")
}
record(bo, "$(P)$(R)LvdsRxTxen5")
{
    field(DESC, "LVDS receiver transmit enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxTxen5")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "sourced by flow cont")
    field(ONAM, "active")
}
record(bo, "$(P)$(R)LvdsRxNoEr0")
{
    field(DESC, "LVDS ignore errors")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxNoEr0")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "discard erronous pac")
    field(ONAM, "keep all packets")
}
record(bo, "$(P)$(R)LvdsRxNoEr1")
{
    field(DESC, "LVDS ignore errors")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxNoEr1")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "discard erronous pac")
    field(ONAM, "keep all packets")
}
record(bo, "$(P)$(R)LvdsRxNoEr2")
{
    field(DESC, "LVDS ignore errors")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxNoEr2")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "discard erronous pac")
    field(ONAM, "keep all packets")
}
record(bo, "$(P)$(R)LvdsRxNoEr3")
{
    field(DESC, "LVDS ignore errors")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxNoEr3")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "discard erronous pac")
    field(ONAM, "keep all packets")
}
record(bo, "$(P)$(R)LvdsRxNoEr4")
{
    field(DESC, "LVDS ignore errors")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxNoEr4")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "discard erronous pac")
    field(ONAM, "keep all packets")
}
record(bo, "$(P)$(R)LvdsRxNoEr5")
{
    field(DESC, "LVDS ignore errors")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxNoEr5")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "discard erronous pac")
    field(ONAM, "keep all packets")
}
record(bo, "$(P)$(R)LvdsRxDis0")
{
    field(DESC, "LVDS disable channel 0")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDis0")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "allow packets")
    field(ONAM, "disable packet proce")
}
record(bo, "$(P)$(R)LvdsRxDis1")
{
    field(DESC, "LVDS disable channel 1")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDis1")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "allow packets")
    field(ONAM, "disable packet proce")
}
record(bo, "$(P)$(R)LvdsRxDis2")
{
    field(DESC, "LVDS disable channel 2")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDis2")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "allow packets")
    field(ONAM, "disable packet proce")
}
record(bo, "$(P)$(R)LvdsRxDis3")
{
    field(DESC, "LVDS disable channel 3")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDis3")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "allow packets")
    field(ONAM, "disable packet proce")
}
record(bo, "$(P)$(R)LvdsRxDis4")
{
    field(DESC, "LVDS disable channel 4")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDis4")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "allow packets")
    field(ONAM, "disable packet proce")
}
record(bo, "$(P)$(R)LvdsRxDis5")
{
    field(DESC, "LVDS disable channel 5")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDis5")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "allow packets")
    field(ONAM, "disable packet proce")
}
record(bo, "$(P)$(R)LvdsRxCmdMod")
{
    field(DESC, "LVDS sorter FIFO parser mode ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxCmdMod")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "as command")
    field(ONAM, "as data")
}
record(bo, "$(P)$(R)LvdsRxDatMod")
{
    field(DESC, "LVDS sorter FIFO parser mode ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDatMod")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "as data")
    field(ONAM, "as command")
}
record(longout, "$(P)$(R)LvdsRxDatSiz")
{
    field(DESC, "LVDS Number of Words in Chann")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxDatSiz")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)LvdsRxPowCtr")
{
    field(DESC, "DSP Power Down During Power D")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxPowCtr")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "power down")
    field(ONAM, "disable power down")
}
record(bo, "$(P)$(R)LvdsRxPowRst")
{
    field(DESC, "Execute Power Down Reset Sequ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxPowRst")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "execute")
    field(ONAM, "bypass")
}
record(longout, "$(P)$(R)LvdsRxFilter")
{
    field(DESC, "Filter all commands")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsRxFilter")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)LvdsCmdFilt")
{
    field(DESC, "LVDS command to filter")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsCmdFilt")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)LvdsCmdFiltM")
{
    field(DESC, "LVDS command filter mask")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsCmdFiltM")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)LvdsTxTclkMo")
{
    field(DESC, "LVDS transmit control TCLK mo")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxTclkMo")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "TCLK generated local")
    field(ONAM, "TCLK generated from ")
}
record(mbbo, "$(P)$(R)LvdsTxTcCtrl")
{
    field(DESC, "LVDS T&C TCLK control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxTcCtrl")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0-1")
    field(ZRST, "TCLK")
    field(ZRVL, "2")
    field(ZRST, "hardwired to 0")
    field(ZRVL, "3")
    field(ZRST, "hardwired")
}
record(mbbo, "$(P)$(R)LvdsTscynoMo")
{
    field(DESC, "LVDS TSYNC_O mode")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTscynoMo")
    field(SCAN, "I/O Intr")
    field(VAL,  "3")
    field(ZRVL, "0")
    field(ZRST, "TSYNC generated ")
    field(ZRVL, "1")
    field(ZRST, "TSYNC generated ")
    field(ZRVL, "2")
    field(ZRST, "TSYNC generated ")
    field(ZRVL, "3")
    field(ZRST, "TSYNC generated ")
}
record(mbbo, "$(P)$(R)LvdsTxTsyncC")
{
    field(DESC, "LVDS TSYNC_NORMAL control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxTsyncC")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "Pulse width modu")
    field(ZRVL, "1")
    field(ZRST, "Pulse width set ")
    field(ZRVL, "2")
    field(ZRST, "hardwired to 0")
    field(ZRVL, "3")
    field(ZRST, "hardwired to 1")
}
record(mbbo, "$(P)$(R)LvdsTxSysrCt")
{
    field(DESC, "LVDS T&C SYSRST# buffer contr")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxSysrCt")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0-1")
    field(ZRST, "sysrst#")
    field(ZRVL, "2")
    field(ZRST, "hardwired to 0")
    field(ZRVL, "3")
    field(ZRST, "hardwired to 1")
}
record(mbbo, "$(P)$(R)LvdsTxTxenCt")
{
    field(DESC, "LVDS T&C TXEN# control when L")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxTxenCt")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0-1")
    field(ZRST, "TXEN# is driven ")
    field(ZRVL, "2")
    field(ZRST, "TXEN# is driven ")
    field(ZRVL, "3")
    field(ZRST, "TXEN# is driven ")
}
record(longout, "$(P)$(R)LvdsTxOutClk")
{
    field(DESC, "LVDS output clock mode")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxOutClk")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(mbbo, "$(P)$(R)LvdsTxCmdRet")
{
    field(DESC, "LVDS Number of times to issue")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxCmdRet")
    field(SCAN, "I/O Intr")
    field(VAL,  "3")
    field(ZRVL, "DISCOVER")
    field(ZRST, "")
    field(ZRVL, " LVDS_VERIFY) command (range 0-3")
    field(ZRST, "")
}
record(bo, "$(P)$(R)LvdsTxWrdL0")
{
    field(DESC, "LVDS channel 0 data word leng")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxWrdL0")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "set by LVDS_RX_FIFO_")
    field(ONAM, "set to 4")
}
record(bo, "$(P)$(R)LvdsTxWrdL1")
{
    field(DESC, "LVDS channel 1 data word leng")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxWrdL1")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "set by LVDS_RX_FIFO_")
    field(ONAM, "set to 4")
}
record(bo, "$(P)$(R)LvdsTxWrdL2")
{
    field(DESC, "LVDS channel 2 data word leng")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxWrdL2")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "set by LVDS_RX_FIFO_")
    field(ONAM, "set to 4")
}
record(bo, "$(P)$(R)LvdsTxWrdL3")
{
    field(DESC, "LVDS channel 3 data word leng")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxWrdL3")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "set by LVDS_RX_FIFO_")
    field(ONAM, "set to 4")
}
record(bo, "$(P)$(R)LvdsTxWrdL4")
{
    field(DESC, "LVDS channel 4 data word leng")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxWrdL4")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "set by LVDS_RX_FIFO_")
    field(ONAM, "set to 4")
}
record(bo, "$(P)$(R)LvdsTxWrdL5")
{
    field(DESC, "LVDS channel 5 data word leng")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxWrdL5")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "set by LVDS_RX_FIFO_")
    field(ONAM, "set to 4")
}
record(mbbo, "$(P)$(R)LvdsTxClkMar")
{
    field(DESC, "LVDS clock margin")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxClkMar")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "allowed values 0-3")
    field(ZRST, "")
}
record(bo, "$(P)$(R)LvdsTxTestPa")
{
    field(DESC, "LVDS T&C test pattern")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxTestPa")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disable")
    field(ONAM, "enable) TODO: need t")
}
record(bo, "$(P)$(R)LvdsTxTestEn")
{
    field(DESC, "LVDS test enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxTestEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disable")
    field(ONAM, "enable) TODO: need t")
}
record(mbbo, "$(P)$(R)LvdsTsyncSrc0")
{
    field(DESC, "LVDS TSYNC T&C source control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncSrc0")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "TSYNC_NORMAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "1")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "2")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " no pulse stretching")
    field(ZRST, "")
    field(ZRVL, "3")
    field(ZRST, "TRefStrbFixed")
    field(ZRVL, "pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
}
record(mbbo, "$(P)$(R)LvdsTsyncSrc1")
{
    field(DESC, "LVDS TSYNC T&C source control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncSrc1")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "TSYNC_NORMAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "1")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "2")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " no pulse stretching")
    field(ZRST, "")
    field(ZRVL, "3")
    field(ZRST, "TRefStrbFixed")
    field(ZRVL, "pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
}
record(mbbo, "$(P)$(R)LvdsTsyncSrc2")
{
    field(DESC, "LVDS TSYNC T&C source control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncSrc2")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "TSYNC_NORMAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "1")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "2")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " no pulse stretching")
    field(ZRST, "")
    field(ZRVL, "3")
    field(ZRST, "TRefStrbFixed")
    field(ZRVL, "pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
}
record(mbbo, "$(P)$(R)LvdsTsyncSrc3")
{
    field(DESC, "LVDS TSYNC T&C source control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncSrc3")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "TSYNC_NORMAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "1")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "2")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " no pulse stretching")
    field(ZRST, "")
    field(ZRVL, "3")
    field(ZRST, "TRefStrbFixed")
    field(ZRVL, "pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
}
record(mbbo, "$(P)$(R)LvdsTsyncSrc4")
{
    field(DESC, "LVDS TSYNC T&C source control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncSrc4")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "TSYNC_NORMAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "1")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "2")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " no pulse stretching")
    field(ZRST, "")
    field(ZRVL, "3")
    field(ZRST, "TRefStrbFixed")
    field(ZRVL, "pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
}
record(mbbo, "$(P)$(R)LvdsTsyncSrc5")
{
    field(DESC, "LVDS TSYNC T&C source control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncSrc5")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "TSYNC_NORMAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "1")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
    field(ZRVL, "2")
    field(ZRST, "TSYNC_LOCAL")
    field(ZRVL, " no pulse stretching")
    field(ZRST, "")
    field(ZRVL, "3")
    field(ZRST, "TRefStrbFixed")
    field(ZRVL, "pulse width stretched according to LVDS_TSYNC_WIDTH")
    field(ZRST, "")
}
record(mbbo, "$(P)$(R)LvdsTsyncMeta")
{
    field(DESC, "LVDS TSYNC metadata source co")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncMeta")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "RTDL")
    field(ZRVL, "1")
    field(ZRST, "LVDS")
    field(ZRVL, "2")
    field(ZRST, "detector TSYNC")
    field(ZRVL, "3")
    field(ZRST, "OFB[0]")
}
record(longout, "$(P)$(R)LvdsTsyncGen")
{
    field(DESC, "LVDS TSYNC generation divisor")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncGen")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)LvdsTsyncDely")
{
    field(DESC, "LVDS TSYNC delay divisor")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncDely")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)LvdsTsyncWid")
{
    field(DESC, "LVDS TSYNC width divisor, wid")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTsyncWid")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)OptCrossSwA")
{
    field(DESC, "Crossbar Switch Pass Control ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptCrossSwA")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "1")
    field(ZRST, "Send to transcei")
    field(ZRVL, "2")
    field(ZRST, "send to transcei")
}
record(mbbo, "$(P)$(R)OptCrossSwB")
{
    field(DESC, "Crossbar Switch Pass Control ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptCrossSwB")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "1")
    field(ZRST, "Send to transcei")
    field(ZRVL, "2")
    field(ZRST, "send to transcei")
}
record(mbbo, "$(P)$(R)OptTxOutModeA")
{
    field(DESC, "Optical transceiver A output ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxOutModeA")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "Normal")
    field(ZRVL, "1")
    field(ZRST, "Timing")
    field(ZRVL, "2")
    field(ZRST, "Chopper")
    field(ZRVL, "3")
    field(ZRST, "Timing master")
}
record(bo, "$(P)$(R)OptTxEocA")
{
    field(DESC, "Optical transceiver A End of ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxEocA")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)OptTxCmdFiltA")
{
    field(DESC, "Optical transceiver A Command")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxCmdFiltA")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)OptTxOutModeB")
{
    field(DESC, "Optical transceiver B output ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxOutModeB")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "Normal")
    field(ZRVL, "1")
    field(ZRST, "Timing")
    field(ZRVL, "2")
    field(ZRST, "Chopper")
    field(ZRVL, "3")
    field(ZRST, "Timing master")
}
record(bo, "$(P)$(R)OptTxEocB")
{
    field(DESC, "Optical transceiver B End of ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxEocB")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
}
record(longout, "$(P)$(R)OptTxCmdFiltB")
{
    field(DESC, "Optical transceiver B Command")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxCmdFiltB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)OptHystEn")
{
    field(DESC, "Optical hysteresis enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptHystEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "control signals gene")
    field(ONAM, "control signals gene")
}
record(bo, "$(P)$(R)OptBlankFrmEn")
{
    field(DESC, "Optical Blank data frame afte")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptBlankFrmEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "no blank frame")
    field(ONAM, "add blank data frame")
}
record(longout, "$(P)$(R)OptTxDelay")
{
    field(DESC, "Optical packet send delay. Nu")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxDelay")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)OptTxDelayCtr")
{
    field(DESC, "Optical packet send delay con")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTxDelayCtr")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "use OPT_TX_DELAY val")
    field(ONAM, "word count in previo")
}
record(longout, "$(P)$(R)OptPktMaxSize")
{
    field(DESC, "Optical data packet max size,")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptPktMaxSize")
    field(SCAN, "I/O Intr")
    field(VAL,  "16111")
}
record(bo, "$(P)$(R)OptDataEopEn")
{
    field(DESC, "Optical Neutron data send EOP")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptDataEopEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "disabled")
    field(ONAM, "enabled) - should be")
}
record(bo, "$(P)$(R)OptMetaEopEn")
{
    field(DESC, "Optical Metadata send EOP")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptMetaEopEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disabled")
    field(ONAM, "enabled) - should be")
}
record(bo, "$(P)$(R)OptTofCtrl")
{
    field(DESC, "TOF control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OptTofCtrl")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "fixed TOF and frame ")
    field(ONAM, "full time offset")
}
record(mbbo, "$(P)$(R)SysResetMode")
{
    field(DESC, "Reset mode => SYSRST_O#")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysResetMode")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0-1")
    field(ZRST, "not used")
    field(ZRVL, "2")
    field(ZRST, "use SYSRST# from")
    field(ZRVL, "3")
    field(ZRST, "use SYSRST# from")
}
record(mbbo, "$(P)$(R)SysStartStopM")
{
    field(DESC, "Start/Stop mode")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysStartStopM")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "normal")
    field(ZRVL, " 1")
    field(ZRST, "fake data mode")
    field(ZRVL, "2-3")
    field(ZRST, "not defined")
}
record(bo, "$(P)$(R)SysFakeTrigEn")
{
    field(DESC, "Fake metadata trigger enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysFakeTrigEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disabled")
    field(ONAM, "enabled")
}
record(bo, "$(P)$(R)SysFastSendEn")
{
    field(DESC, "Send data immediately switch")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysFastSendEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "big packets")
    field(ONAM, "send immediately")
}
record(bo, "$(P)$(R)SysPassthruEn")
{
    field(DESC, "Command response for passthru")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysPassthruEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "don't send")
    field(ONAM, "send")
}
record(bo, "$(P)$(R)SysStartAckEn")
{
    field(DESC, "When set, this bit causes the")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysStartAckEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(mbbo, "$(P)$(R)SysRtdlMode")
{
    field(DESC, "RTDL mode")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysRtdlMode")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZRVL, "0")
    field(ZRST, "no RTDL")
    field(ZRVL, "1")
    field(ZRST, "master")
    field(ZRVL, "2")
    field(ZRST, "slave")
    field(ZRVL, "3")
    field(ZRST, "fake mode")
}
record(bo, "$(P)$(R)SysRtdlOutEnA")
{
    field(DESC, "RTDL output enable to fiber o")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysRtdlOutEnA")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)SysRtdlOutEnB")
{
    field(DESC, "RTDL output enable to fiber o")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysRtdlOutEnB")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)SysTofOffEn")
{
    field(DESC, "Enable TOF full offset")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysTofOffEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)SysFifSyncEn")
{
    field(DESC, "FIFO sync switch")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysFifSyncEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)SysRtdlAsData")
{
    field(DESC, "Send RTDL command as data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysRtdlAsData")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)SysFixRtdlEn")
{
    field(DESC, "Correct RTDL information")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysFixRtdlEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "1")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)SysBadPktEn")
{
    field(DESC, "Send bad packets")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysBadPktEn")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)SysReset")
{
    field(DESC, "Force system reset")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SysReset")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(ZNAM, "disable")
    field(ONAM, "enable")
}
record(bo, "$(P)$(R)Configured")
{
    field(DESC, "Configured")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Configured")
    field(SCAN, "I/O Intr")
    field(ZNAM, "not configured")
    field(ONAM, "configured")
}
record(bo, "$(P)$(R)AcquireStat")
{
    field(DESC, "Acquiring data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))AcquireStat")
    field(SCAN, "I/O Intr")
    field(ZNAM, "not acquiring")
    field(ONAM, "acquiring")
}
record(bo, "$(P)$(R)ProgramErr")
{
    field(DESC, "WRITE_CNFG during ACQUISITION")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ProgramErr")
    field(SCAN, "I/O Intr")
    field(ZNAM, "no error")
    field(ONAM, "error")
}
record(bo, "$(P)$(R)PktLenErr")
{
    field(DESC, "Packet length error")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PktLenErr")
    field(SCAN, "I/O Intr")
    field(ZNAM, "no error")
    field(ONAM, "error")
}
record(bo, "$(P)$(R)UnknwnCmdErr")
{
    field(DESC, "Unrecognized command error")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UnknwnCmdErr")
    field(SCAN, "I/O Intr")
    field(ZNAM, "no error")
    field(ONAM, "error")
}
record(bo, "$(P)$(R)LvdsTxFifFul")
{
    field(DESC, "LVDS TxFIFO went full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsTxFifFul")
    field(SCAN, "I/O Intr")
    field(ZNAM, "not full")
    field(ONAM, "full")
}
record(bo, "$(P)$(R)LvdsCmdErr")
{
    field(DESC, "LVDS command error")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LvdsCmdErr")
    field(SCAN, "I/O Intr")
    field(ZNAM, "no error")
    field(ONAM, "error")
}
record(bo, "$(P)$(R)EepromInitOk")
{
    field(DESC, "EEPROM initialization status")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EepromInitOk")
    field(SCAN, "I/O Intr")
    field(ZNAM, "not ok")
    field(ONAM, "ok")
}
record(longout, "$(P)$(R)RxNumErrsA")
{
    field(DESC, "Error Counter")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxNumErrsA")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)RxErrFlagsA")
{
    field(DESC, "Error flags")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxErrFlagsA")
    field(SCAN, "I/O Intr")
    field(ZRVL, "8")
    field(ZRST, "partial packet t")
    field(ZRVL, "9")
    field(ZRST, "SOF/address swit")
    field(ZRVL, "10")
    field(ZRST, "EOF/address swit")
    field(ZRVL, "11")
    field(ZRST, "SOF/hdr switch")
    field(ZRVL, "12")
    field(ZRST, "EOF/hdr switch")
    field(ZRVL, "13")
    field(ZRST, "SOF/payload swit")
    field(ZRVL, "14")
    field(ZRST, "EOF/payload swit")
    field(ZRVL, "15")
    field(ZRST, "SOF/CRC switch")
    field(ZRVL, "16")
    field(ZRST, "EOF/CRC switch")
    field(ZRVL, "17")
    field(ZRST, "CRC low word")
    field(ZRVL, "18")
    field(ZRST, "CRC high word")
    field(ZRVL, "19")
    field(ZRST, "pri FIFO almost ")
    field(ZRVL, "20")
    field(ZRST, "sec FIFO almost ")
}
record(bo, "$(P)$(R)RxGoodPacketA")
{
    field(DESC, "Last packet was good")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxGoodPacketA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "no")
    field(ONAM, "yes")
}
record(bo, "$(P)$(R)RxPriFifNotEA")
{
    field(DESC, "Stack FIFO Not Empty")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPriFifNotEA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "empty")
    field(ONAM, "not empty")
}
record(bo, "$(P)$(R)RxPriFifAFulA")
{
    field(DESC, "Stack FIFO Almost Full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPriFifAFulA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "not full")
    field(ONAM, "almost full")
}
record(bo, "$(P)$(R)RxSecFifNotEA")
{
    field(DESC, "Secondary FIFO Not Empty")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxSecFifNotEA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "empty")
    field(ONAM, "not empty")
}
record(bo, "$(P)$(R)RxSecFifAFulA")
{
    field(DESC, "Secondary FIFO Almost Full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxSecFifAFulA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "not full")
    field(ONAM, "almost full")
}
record(bo, "$(P)$(R)RxPtCrsbNotEA")
{
    field(DESC, "PassThrough FIFO Not Empty")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPtCrsbNotEA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "empty")
    field(ONAM, "not empty")
}
record(bo, "$(P)$(R)RxPtCrbarAFuA")
{
    field(DESC, "PassThrough FIFO Almost Full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPtCrbarAFuA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "not full")
    field(ONAM, "almost full")
}
record(bo, "$(P)$(R)RxTransTimeA")
{
    field(DESC, "Timeout Pri/Sec FIFO transfer")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxTransTimeA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "no timeout")
    field(ONAM, "timeout")
}
record(bo, "$(P)$(R)RxPriFifFulA")
{
    field(DESC, "Rcvd pckt but stack almost fu")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPriFifFulA")
    field(SCAN, "I/O Intr")
    field(ZNAM, "no")
    field(ONAM, "yes")
}
record(bo, "$(P)$(R)RxPtCrbarFulA")
{
    field(DESC, "Packet received while the Pas")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPtCrbarFulA")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxGoodPacketB")
{
    field(DESC, "Good packet. When set, this i")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxGoodPacketB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxPriFifNotEB")
{
    field(DESC, "Stack FIFO Not Empty")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPriFifNotEB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxPriFifAFulB")
{
    field(DESC, "Stack FIFO Almost Full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPriFifAFulB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxSecFifNotEB")
{
    field(DESC, "Secondary FIFO Not Empty")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxSecFifNotEB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxSecFifAFulB")
{
    field(DESC, "Secondary FIFO Almost Full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxSecFifAFulB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxPtCrsbNotEB")
{
    field(DESC, "Pass-through FIFO to Crossbar")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPtCrsbNotEB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxPtCrbarAFuB")
{
    field(DESC, "Pass-through FIFO to Crossbar")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPtCrbarAFuB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxTransTimeB")
{
    field(DESC, "Timeout in transferring data ")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxTransTimeB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxPriFifFulB")
{
    field(DESC, "Packet received while the Sta")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPriFifFulB")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)RxPtCrbarFulB")
{
    field(DESC, "Packet received while the Pas")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RxPtCrbarFulB")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Ch0RxFlags")
{
    field(DESC, "Error flags")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0RxFlags")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "parity error")
    field(ZRVL, "1")
    field(ZRST, "packet type inco")
    field(ZRVL, "2")
    field(ZRST, "first word/last ")
    field(ZRVL, "3")
    field(ZRST, "packet size over")
    field(ZRVL, "4")
    field(ZRST, "parser FIFO time")
    field(ZRVL, "5")
    field(ZRST, "missing first wo")
    field(ZRVL, "6")
    field(ZRST, "first word befor")
    field(ZRVL, "7")
    field(ZRST, "out FIFO full")
}
record(mbbo, "$(P)$(R)Ch0RxStatus")
{
    field(DESC, "Status OK")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0RxStatus")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "good cmd packet")
    field(ZRVL, "1")
    field(ZRST, "good data packet")
}
record(bo, "$(P)$(R)Ch0RxHasData")
{
    field(DESC, "External FIFO contains data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0RxHasData")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch0RxFifoAlFu")
{
    field(DESC, "External FIFO almost full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0RxFifoAlFu")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch0RxParsHD")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0RxParsHD")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch0RxParsAF")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0RxParsAF")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch0ExtFifEn")
{
    field(DESC, "External FIFO Read Enable ass")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0ExtFifEn")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch0ParsFifEn")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0ParsFifEn")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Ch0NumErrors")
{
    field(DESC, "Number of data packets with e")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch0NumErrors")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Ch1RxFlags")
{
    field(DESC, "Error flags")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1RxFlags")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "parity error")
    field(ZRVL, "1")
    field(ZRST, "packet type inco")
    field(ZRVL, "2")
    field(ZRST, "first word/last ")
    field(ZRVL, "3")
    field(ZRST, "packet size over")
    field(ZRVL, "4")
    field(ZRST, "parser FIFO time")
    field(ZRVL, "5")
    field(ZRST, "missing first wo")
    field(ZRVL, "6")
    field(ZRST, "first word befor")
    field(ZRVL, "7")
    field(ZRST, "out FIFO full")
}
record(mbbo, "$(P)$(R)Ch1RxStatus")
{
    field(DESC, "Status OK")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1RxStatus")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "good cmd packet")
    field(ZRVL, "1")
    field(ZRST, "good data packet")
}
record(bo, "$(P)$(R)Ch1RxHasData")
{
    field(DESC, "External FIFO contains data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1RxHasData")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch1RxFifoAlFu")
{
    field(DESC, "External FIFO almost full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1RxFifoAlFu")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch1RxParsHD")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1RxParsHD")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch1RxParsAF")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1RxParsAF")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch1ExtFifEn")
{
    field(DESC, "External FIFO Read Enable ass")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1ExtFifEn")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch1ParsFifEn")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1ParsFifEn")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Ch1NumErrors")
{
    field(DESC, "Number of data packets with e")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch1NumErrors")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Ch2RxFlags")
{
    field(DESC, "Error flags")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2RxFlags")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "parity error")
    field(ZRVL, "1")
    field(ZRST, "packet type inco")
    field(ZRVL, "2")
    field(ZRST, "first word/last ")
    field(ZRVL, "3")
    field(ZRST, "packet size over")
    field(ZRVL, "4")
    field(ZRST, "parser FIFO time")
    field(ZRVL, "5")
    field(ZRST, "missing first wo")
    field(ZRVL, "6")
    field(ZRST, "first word befor")
    field(ZRVL, "7")
    field(ZRST, "out FIFO full")
}
record(mbbo, "$(P)$(R)Ch2RxStatus")
{
    field(DESC, "Status OK")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2RxStatus")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "good cmd packet")
    field(ZRVL, "1")
    field(ZRST, "good data packet")
}
record(bo, "$(P)$(R)Ch2RxHasData")
{
    field(DESC, "External FIFO contains data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2RxHasData")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch2RxFifoAlFu")
{
    field(DESC, "External FIFO almost full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2RxFifoAlFu")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch2RxParsHD")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2RxParsHD")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch2RxParsAF")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2RxParsAF")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch2ExtFifEn")
{
    field(DESC, "External FIFO Read Enable ass")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2ExtFifEn")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch2ParsFifEn")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2ParsFifEn")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Ch2NumErrors")
{
    field(DESC, "Number of data packets with e")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch2NumErrors")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Ch3RxFlags")
{
    field(DESC, "Error flags")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3RxFlags")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "parity error")
    field(ZRVL, "1")
    field(ZRST, "packet type inco")
    field(ZRVL, "2")
    field(ZRST, "first word/last ")
    field(ZRVL, "3")
    field(ZRST, "packet size over")
    field(ZRVL, "4")
    field(ZRST, "parser FIFO time")
    field(ZRVL, "5")
    field(ZRST, "missing first wo")
    field(ZRVL, "6")
    field(ZRST, "first word befor")
    field(ZRVL, "7")
    field(ZRST, "out FIFO full")
}
record(mbbo, "$(P)$(R)Ch3RxStatus")
{
    field(DESC, "Status OK")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3RxStatus")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "good cmd packet")
    field(ZRVL, "1")
    field(ZRST, "good data packet")
}
record(bo, "$(P)$(R)Ch3RxHasData")
{
    field(DESC, "External FIFO contains data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3RxHasData")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch3RxFifoAlFu")
{
    field(DESC, "External FIFO almost full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3RxFifoAlFu")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch3RxParsHD")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3RxParsHD")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch3RxParsAF")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3RxParsAF")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch3ExtFifEn")
{
    field(DESC, "External FIFO Read Enable ass")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3ExtFifEn")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch3ParsFifEn")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3ParsFifEn")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Ch3NumErrors")
{
    field(DESC, "Number of data packets with e")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch3NumErrors")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Ch4RxFlags")
{
    field(DESC, "Error flags")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4RxFlags")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "parity error")
    field(ZRVL, "1")
    field(ZRST, "packet type inco")
    field(ZRVL, "2")
    field(ZRST, "first word/last ")
    field(ZRVL, "3")
    field(ZRST, "packet size over")
    field(ZRVL, "4")
    field(ZRST, "parser FIFO time")
    field(ZRVL, "5")
    field(ZRST, "missing first wo")
    field(ZRVL, "6")
    field(ZRST, "first word befor")
    field(ZRVL, "7")
    field(ZRST, "out FIFO full")
}
record(mbbo, "$(P)$(R)Ch4RxStatus")
{
    field(DESC, "Status OK")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4RxStatus")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "good cmd packet")
    field(ZRVL, "1")
    field(ZRST, "good data packet")
}
record(bo, "$(P)$(R)Ch4RxHasData")
{
    field(DESC, "External FIFO contains data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4RxHasData")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch4RxFifoAlFu")
{
    field(DESC, "External FIFO almost full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4RxFifoAlFu")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch4RxParsHD")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4RxParsHD")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch4RxParsAF")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4RxParsAF")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch4ExtFifEn")
{
    field(DESC, "External FIFO Read Enable ass")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4ExtFifEn")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch4ParsFifEn")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4ParsFifEn")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Ch4NumErrors")
{
    field(DESC, "Number of data packets with e")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch4NumErrors")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)Ch5RxFlags")
{
    field(DESC, "Error flags")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5RxFlags")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "parity error")
    field(ZRVL, "1")
    field(ZRST, "packet type inco")
    field(ZRVL, "2")
    field(ZRST, "first word/last ")
    field(ZRVL, "3")
    field(ZRST, "packet size over")
    field(ZRVL, "4")
    field(ZRST, "parser FIFO time")
    field(ZRVL, "5")
    field(ZRST, "missing first wo")
    field(ZRVL, "6")
    field(ZRST, "first word befor")
    field(ZRVL, "7")
    field(ZRST, "out FIFO full")
}
record(mbbo, "$(P)$(R)Ch5RxStatus")
{
    field(DESC, "Status OK")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5RxStatus")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ZRST, "good cmd packet")
    field(ZRVL, "1")
    field(ZRST, "good data packet")
}
record(bo, "$(P)$(R)Ch5RxHasData")
{
    field(DESC, "External FIFO contains data")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5RxHasData")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch5RxFifoAlFu")
{
    field(DESC, "External FIFO almost full")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5RxFifoAlFu")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch5RxParsHD")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5RxParsHD")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch5RxParsAF")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5RxParsAF")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch5ExtFifEn")
{
    field(DESC, "External FIFO Read Enable ass")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5ExtFifEn")
    field(SCAN, "I/O Intr")
}
record(bo, "$(P)$(R)Ch5ParsFifEn")
{
    field(DESC, "Channel Link Packet Parser FI")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5ParsFifEn")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)Ch5NumErrors")
{
    field(DESC, "Number of data packets with e")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Ch5NumErrors")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)NumGoodPkts")
{
    field(DESC, "Good data packet counter")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NumGoodPkts")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)MetadataInfo0")
{
    field(DESC, "Metadata channel info - bitfi")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MetadataInfo0")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)MetadataInfo1")
{
    field(DESC, "Metadata channel info - bitfi")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MetadataInfo1")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)MetadataInfo2")
{
    field(DESC, "Metadata channel info - bitfi")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MetadataInfo2")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)DetailInfo")
{
    field(DESC, "Detailed info - bitfields too")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DetailInfo")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)TofOffset")
{
    field(DESC, "TOF offset")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TofOffset")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)RtdlInfo")
{
    field(DESC, "RTDL info - bitfields too fai")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RtdlInfo")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)NumBadRtdl")
{
    field(DESC, "Number of RTDL frames with CR")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NumBadRtdl")
    field(SCAN, "I/O Intr")
}
record(longout, "$(P)$(R)NumBadData")
{
    field(DESC, "Number of Event Link frames w")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NumBadData")
    field(SCAN, "I/O Intr")
}
